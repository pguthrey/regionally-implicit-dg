function [Jac_east_cell_temp,Jac_west_cell_temp, ...
        Jac_east_other_temp,Jac_west_other_temp, ...
        Jac_trunc_east_temp,Jac_trunc_west_temp, ...
        Jac_cell, ...
        trunceast_temp,truncwest_temp, ...
        fluxeast_temp, fluxwest_temp, ...
        residual_cell,maxspeedF] ...
        = problem_predictor_precompute_eastwest_Jacobian_AND_residual(qstar,qeast,qwest,qpast,data,cellcenter)
% Forms the Jacobian of equations given by the DG data.method for a fiv1ed cell
% written by data.Pierson Guthrey
% -------------------------------------------------
% INdata.PUTS    DGsubregion
%           prevcell
%           starcell
%           Jac_truncdirs
% OUTdata.PUTS   Jacobian
% Note: other variables may be %loaded in from the problem parameter files
% ------------------------------------------------------------------------    

thetaT = data.thetaT;

Psi_futr = data.Psi_futr;
I_past = data.I_past;

Jac_cell = Psi_futr;%data.I_futr - data.Psi_dtau;

Jac_east_cell_temp = zeros(thetaT,thetaT);
Jac_west_cell_temp = zeros(thetaT,thetaT);    

Jac_east_other_temp = zeros(thetaT,thetaT);
Jac_west_other_temp = zeros(thetaT,thetaT);  

Jac_trunc_east_temp = zeros(thetaT,thetaT);   
Jac_trunc_west_temp = zeros(thetaT,thetaT); 

trunceast_temp = 0; 
truncwest_temp = 0; 

fluxeast_temp = 0;
fluxwest_temp = 0;    

residual_cell = Psi_futr*qstar-I_past*qpast;
thetaTtilde = thetaT/data.Neqns;

%NewtonJacobian_cc = data.NewtonJacobian_cc;
%NewtonJacobian_cc = NewtonJacobian_cc + NewtonJacobian_cc;
%shortcut = NewtonJacobian_cc(1:thetaTtilde,1:thetaTtilde)*qeast(1:thetaTtilde,1);

vectpsi_east = data.vectpsi_east;
vectpsi_east_Trans = data.vectpsi_east_Trans;
vectpsi_west = data.vectpsi_west;
vectpsi_west_Trans = data.vectpsi_west_Trans;
vectpsi = data.vectpsi;
vectpsi_dxii_Trans = data.vectpsi_dxii_Trans;

nuv1 = data.nuv1;

maxspeedF = 0;
speedeast2 = 0;
speedwest2 = 0;

%{
uvect = 0;
for k = 1:data.Pdp1
        tquad = data.Dp1list(k,1); 
        v1quad = data.Dp1list(k,2); 
        weight = data.Dp1quadwgts(k);
        %Derivative terms
        %wstar = vectpsi(1,1:thetaTtilde,tquad,v1quad)*qstar;
        wstar = vectpsi(:,:,tquad,v1quad)*qstar;
        uvect = uvect + vectpsi(1,1:thetaTtilde,tquad,v1quad)'*wstar(2)/wstar(1);        
end
%}
Neqns = data.Neqns;
Pd = data.Pd;
Pdp1 = data.Pdp1;
Dlist = data.Dlist;
Dp1list = data.Dp1list;
Dquadwgts = data.Dquadwgts;
Dp1quadwgts = data.Dp1quadwgts;
r_param = data.r_param;

%vectpsi_east_one  = vectpsi_east(1,1:thetaTtilde,:,:);
%rhowest(:,1) = qwest(0*thetaTtilde + (1:thetaTtilde));
%mwest(:,1) = qwest(1*thetaTtilde + (1:thetaTtilde));
%Ewest(:,1) = qwest(2*thetaTtilde + (1:thetaTtilde));

I_mat = eye(Neqns);
for k = 1:Pd
    tquad = Dlist(k,1); 
    weight = Dquadwgts(k);    
    
    wwest = vectpsi_east(:,:,tquad)*qwest;       
    weast = vectpsi_west(:,:,tquad)*qeast;

    %East Boundary terms
    wstar = vectpsi_east(:,:,tquad)*qstar;
       
    u = wstar(1);
    
    JF_star(1,1) = u;


    F_star(1,1) = u^2/2 ;
    
    speedF_star = abs(u);

    dspeeddq_star = 0;
    
   
    trunceast_temp = trunceast_temp + (nuv1*weight)*(vectpsi_east_Trans(:,:,tquad)*F_star);
    if r_param > 0
        
        u = weast(1);
        
        JF_east(1,1) = u;

        F_east(1,1) = u^2/2 ;

        speedF_east = abs(u);
        
        dspeeddq_east = 0;   
        
        wavg = (weast+wstar)*0.5;
        u =wavg(1);
            
        speedF_avg = abs(u);
        
        speedeast = max(speedF_star,speedF_east);
        speedeast = max(speedeast,speedF_avg);
        Flux = (F_star+F_east-speedeast.*(weast-wstar))*0.5;
        fluxeast_temp = fluxeast_temp + (nuv1*weight)*(vectpsi_east_Trans(:,:,tquad)*Flux);  
    end
    
    maxspeedF = max(speedeast2,maxspeedF);

    [ Flux ] = vectpsi_east_Trans(:,:,tquad)*JF_star*vectpsi_east(:,:,tquad).*(weight*nuv1);
    Jac_trunc_east_temp = Jac_trunc_east_temp + Flux;

    if r_param > 0
        dspeeddql = dspeeddq_star;%;%compute_F_dwavespeed_dql(wstar,weast,quadpoint,1);
        F_dql = (JF_star+speedeast.*I_mat - (weast-wstar)*dspeeddql)*0.5;
        dFlux = vectpsi_east_Trans(:,:,tquad)*F_dql*vectpsi_east(:,:,tquad).*(weight*nuv1);
        Jac_east_cell_temp = Jac_east_cell_temp + dFlux;
        %psi_m = vectpsi_west(:,:,tquad);
        dspeeddqr = dspeeddq_east;%;%compute_F_dwavespeed_dqr(wstar,weast,quadpoint,1);        
        F_dqr = (JF_east-speedeast.*I_mat - (weast-wstar)*dspeeddqr)*0.5; 
        %????
        dFlux = vectpsi_east_Trans(:,:,tquad)*F_dqr*vectpsi_west(:,:,tquad).*(weight*nuv1);
        Jac_east_other_temp = Jac_east_other_temp + dFlux;
    end
    %west boundary terms
    wstar = vectpsi_west(:,:,tquad)*qstar;
    u =wstar(1);
    
    speedwest1 = abs(u) ;

    wstar = vectpsi_west(:,:,tquad)*qstar;
    
    
    u =wstar(1);
   
    

    JF_star(1,1) = u;

    F_star(1,1) = u^2/2 ;
    
    speedF_star = abs(u);
        

    dspeeddq_star = 0;
    
    
    
    
    
    speedF_west = speedF_star;    
    truncwest_temp = truncwest_temp - (nuv1*weight)*(vectpsi_west_Trans(:,:,tquad)*F_star);
    if r_param > 0
        
        u =wwest(1);
        

        JF_west(1,1) = u;

        F_west(1,1) = u^2/2 ;

        speedF_west = abs(u);
        
        dspeeddq_west = 0;
        wavg = (wwest+wstar)*0.5;
        u =wavg(1);
        
        speedF_avg = abs(u);
        
        speedwest = max(speedF_star,speedF_west);
        speedwest = max(speedwest,speedF_avg);
        %speedwest = max([speedF_star speedF_west speedF_avg]);
        Flux = (F_star+F_west-speedwest.*(wstar-wwest))*0.5;
        fluxwest_temp = fluxwest_temp - (nuv1*weight)*(vectpsi_west_Trans(:,:,tquad)*Flux);
    end       
    
    Jac_trunc_west_temp = Jac_trunc_west_temp - vectpsi_west_Trans(:,:,tquad)*JF_star*vectpsi_west(:,:,tquad).*(weight*nuv1);

    if r_param > 0
        %psi_m = vectpsi_west(:,:,tquad);
        dspeeddqr = dspeeddq_star;%compute_F_dwavespeed_dqr(wwest,wstar,quadpoint,d1a);
        F_dqr = (JF_star-speedwest.*I_mat - (wstar-wwest)*dspeeddqr)*0.5;  
        Jac_west_cell_temp = Jac_west_cell_temp - vectpsi_west_Trans(:,:,tquad)*F_dqr*vectpsi_west(:,:,tquad).*weight*nuv1;
        %psi_m = vectpsi_east(:,:,tquad);
        F_dql = dspeeddq_west;%compute_F_dwavespeed_dql(wwest,wstar,quadpoint,d1);
        dspeeddql = F_dql;
        F_dql = (JF_west-speedwest.*I_mat - (wstar-wwest)*dspeeddql)*0.5;  
        Jac_west_other_temp = Jac_west_other_temp - vectpsi_west_Trans(:,:,tquad)*F_dql*vectpsi_east(:,:,tquad).*(weight*nuv1);        
    end
    maxspeedF = max(speedF_star , maxspeedF);
    maxspeedF = max(speedF_west , maxspeedF);
    maxspeedF = max(speedwest1 , maxspeedF);
    maxspeedF = max(speedwest2 , maxspeedF);
end

%{
for k = 1:Pdp1
        tquad = Dp1list(k,1); 
        %tloc = Dp1quadlocs(k,1);
        v1quad = Dp1list(k,2); 
        weight = Dp1quadwgts(k);
        %Derivative terms
                    
        wstar = vectpsi(:,:,tquad,v1quad)*qstar;
        
        u = wstar(1);
        
        JF_star(1,1) = u;

        F_star(1,1) = u^2/2 ;
        
        speedF_star = abs(u);
 
        %residual_cell = residual_cell - (nuv1*weight)*vectpsi_dxii_Trans(:,:,tquad,v1quad)*F_star;       
            
        %Jac_cell = Jac_cell - (weight*nuv1)*vectpsi_dxii_Trans(:,:,tquad,v1quad)*JF_star*vectpsi(:,:,tquad,v1quad);
        
        maxspeedF = max(speedF_star,maxspeedF);
end
%}
Q = qstar;
u1 = Q(1);
u2 = Q(2);
u3 = Q(3);
u4 = Q(4);
u5 = Q(5);
u6 = Q(6);
u7 = Q(7);
u8 = Q(8);
u9 = Q(9);
u10 = Q(10);
u11 = Q(11);
u12 = Q(12);
u13 = Q(13);
u14 = Q(14);
u15 = Q(15);
u16 = Q(16);

residual_cell_pre(16,1) = 10.58300524425836*u1*u13 + 9.295160030897801*u5*u9 + 23.66431913239846*u1*u15 + 31.74901573277509*u2*u14 + 23.66431913239846*u3*u13 + 20.78460969082653*u5*u11 + 27.8854800926934*u6*u10 + 20.78460969082653*u7*u9 + 20.78460969082653*u2*u16 + 25.70158416462745*u3*u15 + 20.78460969082653*u4*u14 + 18.25533190213596*u6*u12 + 22.57396007503752*u7*u11 + 18.25533190213596*u8*u10 + 24.69367890326951*u4*u16 + 21.68870673876153*u8*u12 + 6.310485101972924*u9*u13 + 14.11067365901115*u9*u15 + 18.93145530591877*u10*u14 + 14.11067365901115*u11*u13 + 12.39354670786373*u10*u16 + 15.3254638190771*u11*u15 + 12.39354670786373*u12*u14 + 14.72446523793682*u12*u16;
residual_cell_pre(15,1) = 15.49193338482967*u1*u14 + 15.49193338482967*u2*u13 + 13.60672102833218*u5*u10 + 13.60672102833218*u6*u9 + 13.85640646055102*u2*u15 + 13.85640646055102*u3*u14 + 12.17022126809064*u6*u11 + 12.17022126809064*u7*u10 + 13.60672102833218*u3*u16 + 13.60672102833218*u4*u15 + 11.95092003972574*u7*u12 + 11.95092003972574*u8*u11 + 9.237604307034012*u9*u14 + 9.237604307034012*u10*u13 + 8.262364471909156*u10*u15 + 8.262364471909156*u11*u14 + 8.113480845393759*u11*u16 + 8.113480845393759*u12*u15;
residual_cell_pre(14,1) = 6.928203230275509*u1*u13 + 6.085110634045319*u5*u9 + 6.928203230275509*u2*u14 + 6.085110634045319*u6*u10 + 6.928203230275509*u3*u15 + 6.085110634045319*u7*u11 + 6.928203230275509*u4*u16 + 6.085110634045319*u8*u12 + 4.131182235954578*u9*u13 + 4.131182235954578*u10*u14 + 4.131182235954578*u11*u15 + 4.131182235954578*u12*u16;
residual_cell_pre(12,1) = 10.58300524425836*u1*u9 + 23.66431913239846*u1*u11 + 31.74901573277509*u2*u10 + 23.66431913239846*u3*u9 + 21.16601048851672*u5*u7 + 20.78460969082653*u2*u12 + 25.70158416462745*u3*u11 + 20.78460969082653*u4*u10 + 18.5903200617956*u6*u8 + 24.69367890326951*u4*u12 + 9.295160030897801*u5*u13 + 20.78460969082653*u5*u15 + 27.8854800926934*u6*u14 + 20.78460969082653*u7*u13 + 15.11857892036909*u9*u11 + 18.25533190213596*u6*u16 + 22.57396007503752*u7*u15 + 18.25533190213596*u8*u14 + 13.27880004413972*u10*u12 + 21.68870673876153*u8*u16 + 14.11067365901115*u13*u15 + 12.39354670786373*u14*u16 + 4.732863826479693*u5^2 + 14.19859147943908*u6^2 + 11.49409786430783*u7^2 + 11.04334892845262*u8^2 + 3.380617018914066*u9^2 + 10.1418510567422*u10^2 + 8.210069903077018*u11^2 + 7.888106377466155*u12^2 + 3.155242550986462*u13^2 + 9.465727652959386*u14^2 + 7.66273190953855*u15^2 + 7.362232618968411*u16^2;
residual_cell_pre(11,1) = 15.49193338482967*u1*u10 + 15.49193338482967*u2*u9 + 13.85640646055102*u5*u6 + 13.85640646055102*u2*u11 + 13.85640646055102*u3*u10 + 12.39354670786373*u6*u7 + 13.60672102833218*u3*u12 + 13.60672102833218*u4*u11 + 12.17022126809064*u7*u8 + 13.60672102833218*u5*u14 + 13.60672102833218*u6*u13 + 9.89743318610787*u9*u10 + 12.17022126809064*u6*u15 + 12.17022126809064*u7*u14 + 8.85253336275981*u10*u11 + 11.95092003972574*u7*u16 + 11.95092003972574*u8*u15 + 8.693015191493313*u11*u12 + 9.237604307034012*u13*u14 + 8.262364471909156*u14*u15 + 8.113480845393759*u15*u16;
residual_cell_pre(10,1) = 6.928203230275509*u1*u9 + 6.928203230275509*u2*u10 + 6.928203230275509*u3*u11 + 6.928203230275509*u4*u12 + 6.085110634045319*u5*u13 + 6.085110634045319*u6*u14 + 6.085110634045319*u7*u15 + 6.085110634045319*u8*u16 + 3.098386676965934*u5^2 + 3.098386676965934*u6^2 + 3.098386676965934*u7^2 + 3.098386676965934*u8^2 + 2.213133340689953*u9^2 + 2.213133340689953*u10^2 + 2.213133340689953*u11^2 + 2.213133340689953*u12^2 + 2.065591117977289*u13^2 + 2.065591117977289*u14^2 + 2.065591117977289*u15^2 + 2.065591117977289*u16^2;
residual_cell_pre(8,1) = 10.58300524425836*u1*u5 + 23.66431913239846*u1*u7 + 31.74901573277509*u2*u6 + 23.66431913239846*u3*u5 + 20.78460969082653*u2*u8 + 25.70158416462745*u3*u7 + 20.78460969082653*u4*u6 + 24.69367890326951*u4*u8 + 9.465727652959386*u5*u9 + 21.16601048851672*u5*u11 + 28.39718295887816*u6*u10 + 21.16601048851672*u7*u9 + 18.5903200617956*u6*u12 + 22.98819572861565*u7*u11 + 18.5903200617956*u8*u10 + 22.08669785690523*u8*u12 + 9.295160030897801*u9*u13 + 20.78460969082653*u9*u15 + 27.8854800926934*u10*u14 + 20.78460969082653*u11*u13 + 18.25533190213596*u10*u16 + 22.57396007503752*u11*u15 + 18.25533190213596*u12*u14 + 21.68870673876153*u12*u16;
residual_cell_pre(7,1) = 15.49193338482967*u1*u6 + 15.49193338482967*u2*u5 + 13.85640646055102*u2*u7 + 13.85640646055102*u3*u6 + 13.60672102833218*u3*u8 + 13.60672102833218*u4*u7 + 13.85640646055102*u5*u10 + 13.85640646055102*u6*u9 + 12.39354670786373*u6*u11 + 12.39354670786373*u7*u10 + 12.17022126809064*u7*u12 + 12.17022126809064*u8*u11 + 13.60672102833218*u9*u14 + 13.60672102833218*u10*u13 + 12.17022126809064*u10*u15 + 12.17022126809064*u11*u14 + 11.95092003972574*u11*u16 + 11.95092003972574*u12*u15;
residual_cell_pre(6,1) = 6.928203230275509*u1*u5 + 6.928203230275509*u2*u6 + 6.928203230275509*u3*u7 + 6.928203230275509*u4*u8 + 6.196773353931867*u5*u9 + 6.196773353931867*u6*u10 + 6.196773353931867*u7*u11 + 6.196773353931867*u8*u12 + 6.085110634045319*u9*u13 + 6.085110634045319*u10*u14 + 6.085110634045319*u11*u15 + 6.085110634045319*u12*u16;
residual_cell_pre(4,1) = 23.66431913239846*u1*u3 + 20.78460969082653*u2*u4 + 23.66431913239846*u5*u7 + 20.78460969082653*u6*u8 + 23.66431913239846*u9*u11 + 20.78460969082653*u10*u12 + 23.66431913239846*u13*u15 + 20.78460969082653*u14*u16 + 5.291502622129181*u1^2 + 15.87450786638754*u2^2 + 12.85079208231373*u3^2 + 12.34683945163476*u4^2 + 5.291502622129181*u5^2 + 15.87450786638754*u6^2 + 12.85079208231373*u7^2 + 12.34683945163476*u8^2 + 5.291502622129181*u9^2 + 15.87450786638754*u10^2 + 12.85079208231373*u11^2 + 12.34683945163476*u12^2 + 5.291502622129181*u13^2 + 15.87450786638754*u14^2 + 12.85079208231373*u15^2 + 12.34683945163476*u16^2;
residual_cell_pre(3,1) = 15.49193338482967*u1*u2 + 13.85640646055102*u2*u3 + 13.60672102833218*u3*u4 + 15.49193338482967*u5*u6 + 13.85640646055102*u6*u7 + 13.60672102833218*u7*u8 + 15.49193338482967*u9*u10 + 13.85640646055102*u10*u11 + 13.60672102833218*u11*u12 + 15.49193338482967*u13*u14 + 13.85640646055102*u14*u15 + 13.60672102833218*u15*u16;
residual_cell_pre(2,1) = 3.464101615137755*u1^2 + 3.464101615137755*u2^2 + 3.464101615137755*u3^2 + 3.464101615137755*u4^2 + 3.464101615137755*u5^2 + 3.464101615137755*u6^2 + 3.464101615137755*u7^2 + 3.464101615137755*u8^2 + 3.464101615137755*u9^2 + 3.464101615137755*u10^2 + 3.464101615137755*u11^2 + 3.464101615137755*u12^2 + 3.464101615137755*u13^2 + 3.464101615137755*u14^2 + 3.464101615137755*u15^2 + 3.464101615137755*u16^2;
Jac_cell_pre(16,16) = 20.78460969082653*u2 + 24.69367890326951*u4 + 12.39354670786373*u10 + 14.72446523793682*u12;
Jac_cell_pre(16,15) = 23.66431913239846*u1 + 25.70158416462745*u3 + 14.11067365901115*u9 + 15.3254638190771*u11;
Jac_cell_pre(16,14) = 31.74901573277509*u2 + 20.78460969082653*u4 + 18.93145530591877*u10 + 12.39354670786373*u12;
Jac_cell_pre(16,13) = 10.58300524425836*u1 + 23.66431913239846*u3 + 6.310485101972924*u9 + 14.11067365901115*u11;
Jac_cell_pre(16,12) = 18.25533190213596*u6 + 21.68870673876153*u8 + 12.39354670786373*u14 + 14.72446523793682*u16;
Jac_cell_pre(16,11) = 20.78460969082653*u5 + 22.57396007503752*u7 + 14.11067365901115*u13 + 15.3254638190771*u15;
Jac_cell_pre(16,10) = 27.8854800926934*u6 + 18.25533190213596*u8 + 18.93145530591877*u14 + 12.39354670786373*u16;
Jac_cell_pre(16,9) = 9.295160030897801*u5 + 20.78460969082653*u7 + 6.310485101972924*u13 + 14.11067365901115*u15;
Jac_cell_pre(16,8) = 18.25533190213596*u10 + 21.68870673876153*u12;
Jac_cell_pre(16,7) = 20.78460969082653*u9 + 22.57396007503752*u11;
Jac_cell_pre(16,6) = 27.8854800926934*u10 + 18.25533190213596*u12;
Jac_cell_pre(16,5) = 9.295160030897801*u9 + 20.78460969082653*u11;
Jac_cell_pre(16,4) = 20.78460969082653*u14 + 24.69367890326951*u16;
Jac_cell_pre(16,3) = 23.66431913239846*u13 + 25.70158416462745*u15;
Jac_cell_pre(16,2) = 31.74901573277509*u14 + 20.78460969082653*u16;
Jac_cell_pre(16,1) = 10.58300524425836*u13 + 23.66431913239846*u15;
Jac_cell_pre(15,16) = 13.60672102833218*u3 + 8.113480845393759*u11;
Jac_cell_pre(15,15) = 13.85640646055102*u2 + 13.60672102833218*u4 + 8.262364471909156*u10 + 8.113480845393759*u12;
Jac_cell_pre(15,14) = 15.49193338482967*u1 + 13.85640646055102*u3 + 9.237604307034012*u9 + 8.262364471909156*u11;
Jac_cell_pre(15,13) = 15.49193338482967*u2 + 9.237604307034012*u10;
Jac_cell_pre(15,12) = 11.95092003972574*u7 + 8.113480845393759*u15;
Jac_cell_pre(15,11) = 12.17022126809064*u6 + 11.95092003972574*u8 + 8.262364471909156*u14 + 8.113480845393759*u16;
Jac_cell_pre(15,10) = 13.60672102833218*u5 + 12.17022126809064*u7 + 9.237604307034012*u13 + 8.262364471909156*u15;
Jac_cell_pre(15,9) = 13.60672102833218*u6 + 9.237604307034012*u14;
Jac_cell_pre(15,8) = 11.95092003972574*u11;
Jac_cell_pre(15,7) = 12.17022126809064*u10 + 11.95092003972574*u12;
Jac_cell_pre(15,6) = 13.60672102833218*u9 + 12.17022126809064*u11;
Jac_cell_pre(15,5) = 13.60672102833218*u10;
Jac_cell_pre(15,4) = 13.60672102833218*u15;
Jac_cell_pre(15,3) = 13.85640646055102*u14 + 13.60672102833218*u16;
Jac_cell_pre(15,2) = 15.49193338482967*u13 + 13.85640646055102*u15;
Jac_cell_pre(15,1) = 15.49193338482967*u14;
Jac_cell_pre(14,16) = 6.928203230275509*u4 + 4.131182235954578*u12;
Jac_cell_pre(14,15) = 6.928203230275509*u3 + 4.131182235954578*u11;
Jac_cell_pre(14,14) = 6.928203230275509*u2 + 4.131182235954578*u10;
Jac_cell_pre(14,13) = 6.928203230275509*u1 + 4.131182235954578*u9;
Jac_cell_pre(14,12) = 6.085110634045319*u8 + 4.131182235954578*u16;
Jac_cell_pre(14,11) = 6.085110634045319*u7 + 4.131182235954578*u15;
Jac_cell_pre(14,10) = 6.085110634045319*u6 + 4.131182235954578*u14;
Jac_cell_pre(14,9) = 6.085110634045319*u5 + 4.131182235954578*u13;
Jac_cell_pre(14,8) = 6.085110634045319*u12;
Jac_cell_pre(14,7) = 6.085110634045319*u11;
Jac_cell_pre(14,6) = 6.085110634045319*u10;
Jac_cell_pre(14,5) = 6.085110634045319*u9;
Jac_cell_pre(14,4) = 6.928203230275509*u16;
Jac_cell_pre(14,3) = 6.928203230275509*u15;
Jac_cell_pre(14,2) = 6.928203230275509*u14;
Jac_cell_pre(14,1) = 6.928203230275509*u13;
Jac_cell_pre(12,16) = 18.25533190213596*u6 + 21.68870673876153*u8 + 12.39354670786373*u14 + 14.72446523793682*u16;
Jac_cell_pre(12,15) = 20.78460969082653*u5 + 22.57396007503752*u7 + 14.11067365901115*u13 + 15.3254638190771*u15;
Jac_cell_pre(12,14) = 27.8854800926934*u6 + 18.25533190213596*u8 + 18.93145530591877*u14 + 12.39354670786373*u16;
Jac_cell_pre(12,13) = 9.295160030897801*u5 + 20.78460969082653*u7 + 6.310485101972924*u13 + 14.11067365901115*u15;
Jac_cell_pre(12,12) = 20.78460969082653*u2 + 24.69367890326951*u4 + 13.27880004413972*u10 + 15.77621275493231*u12;
Jac_cell_pre(12,11) = 23.66431913239846*u1 + 25.70158416462745*u3 + 15.11857892036909*u9 + 16.42013980615404*u11;
Jac_cell_pre(12,10) = 31.74901573277509*u2 + 20.78460969082653*u4 + 20.2837021134844*u10 + 13.27880004413972*u12;
Jac_cell_pre(12,9) = 10.58300524425836*u1 + 23.66431913239846*u3 + 6.761234037828133*u9 + 15.11857892036909*u11;
Jac_cell_pre(12,8) = 18.5903200617956*u6 + 22.08669785690523*u8 + 18.25533190213596*u14 + 21.68870673876153*u16;
Jac_cell_pre(12,7) = 21.16601048851672*u5 + 22.98819572861565*u7 + 20.78460969082653*u13 + 22.57396007503752*u15;
Jac_cell_pre(12,6) = 28.39718295887816*u6 + 18.5903200617956*u8 + 27.8854800926934*u14 + 18.25533190213596*u16;
Jac_cell_pre(12,5) = 9.465727652959386*u5 + 21.16601048851672*u7 + 9.295160030897801*u13 + 20.78460969082653*u15;
Jac_cell_pre(12,4) = 20.78460969082653*u10 + 24.69367890326951*u12;
Jac_cell_pre(12,3) = 23.66431913239846*u9 + 25.70158416462745*u11;
Jac_cell_pre(12,2) = 31.74901573277509*u10 + 20.78460969082653*u12;
Jac_cell_pre(12,1) = 10.58300524425836*u9 + 23.66431913239846*u11;
Jac_cell_pre(11,16) = 11.95092003972574*u7 + 8.113480845393759*u15;
Jac_cell_pre(11,15) = 12.17022126809064*u6 + 11.95092003972574*u8 + 8.262364471909156*u14 + 8.113480845393759*u16;
Jac_cell_pre(11,14) = 13.60672102833218*u5 + 12.17022126809064*u7 + 9.237604307034012*u13 + 8.262364471909156*u15;
Jac_cell_pre(11,13) = 13.60672102833218*u6 + 9.237604307034012*u14;
Jac_cell_pre(11,12) = 13.60672102833218*u3 + 8.693015191493313*u11;
Jac_cell_pre(11,11) = 13.85640646055102*u2 + 13.60672102833218*u4 + 8.85253336275981*u10 + 8.693015191493313*u12;
Jac_cell_pre(11,10) = 15.49193338482967*u1 + 13.85640646055102*u3 + 9.89743318610787*u9 + 8.85253336275981*u11;
Jac_cell_pre(11,9) = 15.49193338482967*u2 + 9.89743318610787*u10;
Jac_cell_pre(11,8) = 12.17022126809064*u7 + 11.95092003972574*u15;
Jac_cell_pre(11,7) = 12.39354670786373*u6 + 12.17022126809064*u8 + 12.17022126809064*u14 + 11.95092003972574*u16;
Jac_cell_pre(11,6) = 13.85640646055102*u5 + 12.39354670786373*u7 + 13.60672102833218*u13 + 12.17022126809064*u15;
Jac_cell_pre(11,5) = 13.85640646055102*u6 + 13.60672102833218*u14;
Jac_cell_pre(11,4) = 13.60672102833218*u11;
Jac_cell_pre(11,3) = 13.85640646055102*u10 + 13.60672102833218*u12;
Jac_cell_pre(11,2) = 15.49193338482967*u9 + 13.85640646055102*u11;
Jac_cell_pre(11,1) = 15.49193338482967*u10;
Jac_cell_pre(10,16) = 6.085110634045319*u8 + 4.131182235954578*u16;
Jac_cell_pre(10,15) = 6.085110634045319*u7 + 4.131182235954578*u15;
Jac_cell_pre(10,14) = 6.085110634045319*u6 + 4.131182235954578*u14;
Jac_cell_pre(10,13) = 6.085110634045319*u5 + 4.131182235954578*u13;
Jac_cell_pre(10,12) = 6.928203230275509*u4 + 4.426266681379905*u12;
Jac_cell_pre(10,11) = 6.928203230275509*u3 + 4.426266681379905*u11;
Jac_cell_pre(10,10) = 6.928203230275509*u2 + 4.426266681379905*u10;
Jac_cell_pre(10,9) = 6.928203230275509*u1 + 4.426266681379905*u9;
Jac_cell_pre(10,8) = 6.196773353931867*u8 + 6.085110634045319*u16;
Jac_cell_pre(10,7) = 6.196773353931867*u7 + 6.085110634045319*u15;
Jac_cell_pre(10,6) = 6.196773353931867*u6 + 6.085110634045319*u14;
Jac_cell_pre(10,5) = 6.196773353931867*u5 + 6.085110634045319*u13;
Jac_cell_pre(10,4) = 6.928203230275509*u12;
Jac_cell_pre(10,3) = 6.928203230275509*u11;
Jac_cell_pre(10,2) = 6.928203230275509*u10;
Jac_cell_pre(10,1) = 6.928203230275509*u9;
Jac_cell_pre(8,16) = 18.25533190213596*u10 + 21.68870673876153*u12;
Jac_cell_pre(8,15) = 20.78460969082653*u9 + 22.57396007503752*u11;
Jac_cell_pre(8,14) = 27.8854800926934*u10 + 18.25533190213596*u12;
Jac_cell_pre(8,13) = 9.295160030897801*u9 + 20.78460969082653*u11;
Jac_cell_pre(8,12) = 18.5903200617956*u6 + 22.08669785690523*u8 + 18.25533190213596*u14 + 21.68870673876153*u16;
Jac_cell_pre(8,11) = 21.16601048851672*u5 + 22.98819572861565*u7 + 20.78460969082653*u13 + 22.57396007503752*u15;
Jac_cell_pre(8,10) = 28.39718295887816*u6 + 18.5903200617956*u8 + 27.8854800926934*u14 + 18.25533190213596*u16;
Jac_cell_pre(8,9) = 9.465727652959386*u5 + 21.16601048851672*u7 + 9.295160030897801*u13 + 20.78460969082653*u15;
Jac_cell_pre(8,8) = 20.78460969082653*u2 + 24.69367890326951*u4 + 18.5903200617956*u10 + 22.08669785690523*u12;
Jac_cell_pre(8,7) = 23.66431913239846*u1 + 25.70158416462745*u3 + 21.16601048851672*u9 + 22.98819572861565*u11;
Jac_cell_pre(8,6) = 31.74901573277509*u2 + 20.78460969082653*u4 + 28.39718295887816*u10 + 18.5903200617956*u12;
Jac_cell_pre(8,5) = 10.58300524425836*u1 + 23.66431913239846*u3 + 9.465727652959386*u9 + 21.16601048851672*u11;
Jac_cell_pre(8,4) = 20.78460969082653*u6 + 24.69367890326951*u8;
Jac_cell_pre(8,3) = 23.66431913239846*u5 + 25.70158416462745*u7;
Jac_cell_pre(8,2) = 31.74901573277509*u6 + 20.78460969082653*u8;
Jac_cell_pre(8,1) = 10.58300524425836*u5 + 23.66431913239846*u7;
Jac_cell_pre(7,16) = 11.95092003972574*u11;
Jac_cell_pre(7,15) = 12.17022126809064*u10 + 11.95092003972574*u12;
Jac_cell_pre(7,14) = 13.60672102833218*u9 + 12.17022126809064*u11;
Jac_cell_pre(7,13) = 13.60672102833218*u10;
Jac_cell_pre(7,12) = 12.17022126809064*u7 + 11.95092003972574*u15;
Jac_cell_pre(7,11) = 12.39354670786373*u6 + 12.17022126809064*u8 + 12.17022126809064*u14 + 11.95092003972574*u16;
Jac_cell_pre(7,10) = 13.85640646055102*u5 + 12.39354670786373*u7 + 13.60672102833218*u13 + 12.17022126809064*u15;
Jac_cell_pre(7,9) = 13.85640646055102*u6 + 13.60672102833218*u14;
Jac_cell_pre(7,8) = 13.60672102833218*u3 + 12.17022126809064*u11;
Jac_cell_pre(7,7) = 13.85640646055102*u2 + 13.60672102833218*u4 + 12.39354670786373*u10 + 12.17022126809064*u12;
Jac_cell_pre(7,6) = 15.49193338482967*u1 + 13.85640646055102*u3 + 13.85640646055102*u9 + 12.39354670786373*u11;
Jac_cell_pre(7,5) = 15.49193338482967*u2 + 13.85640646055102*u10;
Jac_cell_pre(7,4) = 13.60672102833218*u7;
Jac_cell_pre(7,3) = 13.85640646055102*u6 + 13.60672102833218*u8;
Jac_cell_pre(7,2) = 15.49193338482967*u5 + 13.85640646055102*u7;
Jac_cell_pre(7,1) = 15.49193338482967*u6;
Jac_cell_pre(6,16) = 6.085110634045319*u12;
Jac_cell_pre(6,15) = 6.085110634045319*u11;
Jac_cell_pre(6,14) = 6.085110634045319*u10;
Jac_cell_pre(6,13) = 6.085110634045319*u9;
Jac_cell_pre(6,12) = 6.196773353931867*u8 + 6.085110634045319*u16;
Jac_cell_pre(6,11) = 6.196773353931867*u7 + 6.085110634045319*u15;
Jac_cell_pre(6,10) = 6.196773353931867*u6 + 6.085110634045319*u14;
Jac_cell_pre(6,9) = 6.196773353931867*u5 + 6.085110634045319*u13;
Jac_cell_pre(6,8) = 6.928203230275509*u4 + 6.196773353931867*u12;
Jac_cell_pre(6,7) = 6.928203230275509*u3 + 6.196773353931867*u11;
Jac_cell_pre(6,6) = 6.928203230275509*u2 + 6.196773353931867*u10;
Jac_cell_pre(6,5) = 6.928203230275509*u1 + 6.196773353931867*u9;
Jac_cell_pre(6,4) = 6.928203230275509*u8;
Jac_cell_pre(6,3) = 6.928203230275509*u7;
Jac_cell_pre(6,2) = 6.928203230275509*u6;
Jac_cell_pre(6,1) = 6.928203230275509*u5;
Jac_cell_pre(4,16) = 20.78460969082653*u14 + 24.69367890326951*u16;
Jac_cell_pre(4,15) = 23.66431913239846*u13 + 25.70158416462745*u15;
Jac_cell_pre(4,14) = 31.74901573277509*u14 + 20.78460969082653*u16;
Jac_cell_pre(4,13) = 10.58300524425836*u13 + 23.66431913239846*u15;
Jac_cell_pre(4,12) = 20.78460969082653*u10 + 24.69367890326951*u12;
Jac_cell_pre(4,11) = 23.66431913239846*u9 + 25.70158416462745*u11;
Jac_cell_pre(4,10) = 31.74901573277509*u10 + 20.78460969082653*u12;
Jac_cell_pre(4,9) = 10.58300524425836*u9 + 23.66431913239846*u11;
Jac_cell_pre(4,8) = 20.78460969082653*u6 + 24.69367890326951*u8;
Jac_cell_pre(4,7) = 23.66431913239846*u5 + 25.70158416462745*u7;
Jac_cell_pre(4,6) = 31.74901573277509*u6 + 20.78460969082653*u8;
Jac_cell_pre(4,5) = 10.58300524425836*u5 + 23.66431913239846*u7;
Jac_cell_pre(4,4) = 20.78460969082653*u2 + 24.69367890326951*u4;
Jac_cell_pre(4,3) = 23.66431913239846*u1 + 25.70158416462745*u3;
Jac_cell_pre(4,2) = 31.74901573277509*u2 + 20.78460969082653*u4;
Jac_cell_pre(4,1) = 10.58300524425836*u1 + 23.66431913239846*u3;
Jac_cell_pre(3,16) = 13.60672102833218*u15;
Jac_cell_pre(3,15) = 13.85640646055102*u14 + 13.60672102833218*u16;
Jac_cell_pre(3,14) = 15.49193338482967*u13 + 13.85640646055102*u15;
Jac_cell_pre(3,13) = 15.49193338482967*u14;
Jac_cell_pre(3,12) = 13.60672102833218*u11;
Jac_cell_pre(3,11) = 13.85640646055102*u10 + 13.60672102833218*u12;
Jac_cell_pre(3,10) = 15.49193338482967*u9 + 13.85640646055102*u11;
Jac_cell_pre(3,9) = 15.49193338482967*u10;
Jac_cell_pre(3,8) = 13.60672102833218*u7;
Jac_cell_pre(3,7) = 13.85640646055102*u6 + 13.60672102833218*u8;
Jac_cell_pre(3,6) = 15.49193338482967*u5 + 13.85640646055102*u7;
Jac_cell_pre(3,5) = 15.49193338482967*u6;
Jac_cell_pre(3,4) = 13.60672102833218*u3;
Jac_cell_pre(3,3) = 13.85640646055102*u2 + 13.60672102833218*u4;
Jac_cell_pre(3,2) = 15.49193338482967*u1 + 13.85640646055102*u3;
Jac_cell_pre(3,1) = 15.49193338482967*u2;
Jac_cell_pre(2,16) = 6.928203230275509*u16;
Jac_cell_pre(2,15) = 6.928203230275509*u15;
Jac_cell_pre(2,14) = 6.928203230275509*u14;
Jac_cell_pre(2,13) = 6.928203230275509*u13;
Jac_cell_pre(2,12) = 6.928203230275509*u12;
Jac_cell_pre(2,11) = 6.928203230275509*u11;
Jac_cell_pre(2,10) = 6.928203230275509*u10;
Jac_cell_pre(2,9) = 6.928203230275509*u9;
Jac_cell_pre(2,8) = 6.928203230275509*u8;
Jac_cell_pre(2,7) = 6.928203230275509*u7;
Jac_cell_pre(2,6) = 6.928203230275509*u6;
Jac_cell_pre(2,5) = 6.928203230275509*u5;
Jac_cell_pre(2,4) = 6.928203230275509*u4;
Jac_cell_pre(2,3) = 6.928203230275509*u3;
Jac_cell_pre(2,2) = 6.928203230275509*u2;
Jac_cell_pre(2,1) = 6.928203230275509*u1;

Jac_cell = data.Psi_futr - nuv1*Jac_cell_pre;
residual_cell = residual_cell - nuv1*residual_cell_pre;

end